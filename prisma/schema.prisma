// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  inactive
  active
  deactivate
}

enum loanPaymentStatus {
  upcoming
  pending
  paid
  approved
  rejected
}

enum loanRepaymentFrequency {
  weekly
  biweekly
  monthly
  quarterly
  yearly
}

enum UserType {
  admin
  user
}

enum DepositStatus {
  pending
  paid
  approved
  rejected
}

enum paymentMethod {
  bank_transfer
  esewa
}

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  fullName       String
  password       String
  phoneNumber    String     @unique
  token          String?
  user_type      UserType   @default(user)
  image          String?
  activationDate DateTime
  isFirstTime    Boolean
  status         UserStatus @default(inactive)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deposit        Deposit[]
  loan           Loan[]
}

model Deposit {
  id            String        @id @default(uuid())
  userId        String
  isPaid        Boolean       @default(false)
  amount        Float
  status        DepositStatus @default(pending)
  fine          Float?
  depositDate   DateTime
  month         Int
  year          Int
  paymentMethod paymentMethod @default(bank_transfer)
  receipt       String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
}

model Loan {
  id                 String                 @id @default(uuid())
  userId             String
  amount             Float
  totalInterest      Float?
  loanDuration       Int
  totalFine          Float?                 @default(0)
  loanDate           DateTime               @default(now())
  status             DepositStatus          @default(pending)
  repaymentFrequency loanRepaymentFrequency @default(monthly)
  user               User                   @relation(fields: [userId], references: [id])
  LoanPayment        LoanPayment[]
  notes              String?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
}

model LoanPayment {
  id          String            @id @default(uuid())
  isPaid      Boolean           @default(false)
  loanId      String
  amount      Float
  fine        Float             @default(0)
  paymentDate DateTime
  receipt     String?
  notes       String?
  status      loanPaymentStatus @default(upcoming)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  loan        Loan              @relation(fields: [loanId], references: [id])
}
